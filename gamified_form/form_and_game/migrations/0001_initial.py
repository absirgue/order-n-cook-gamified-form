# Generated by Django 4.1.5 on 2023-01-27 15:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import form_and_game.models
import form_and_game.user_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=20)),
                ('last_name', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('reset_password_token', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', form_and_game.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone_number', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(code='invalid_phone_number', message='Phone number should be  8 or 13 digits long and can optionally be preceded by the country code followed by a space or a coma.', regex='/^(?:[0-8]\\d|9[0-8])\\d{3}$/')])),
                ('restaurant_name', models.CharField(blank=True, max_length=100)),
                ('restaurant_address', models.CharField(blank=True, max_length=150)),
                ('restaurant_city', models.CharField(blank=True, max_length=35)),
                ('restaurant_postal_code', models.CharField(blank=True, max_length=7)),
                ('checking_picture', models.CharField(blank=True, max_length=100)),
                ('to_contact_when_product_is_out', models.FileField(upload_to=form_and_game.models.player_directory_path)),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
            ],
        ),
        migrations.CreateModel(
            name='IntroductionFormAnswers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
    ]
