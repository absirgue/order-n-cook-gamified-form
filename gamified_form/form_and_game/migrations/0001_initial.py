# Generated by Django 4.1.5 on 2023-01-30 23:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import form_and_game.models
import form_and_game.user_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=20)),
                ('last_name', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('reset_password_token', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', form_and_game.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone_number', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(code='invalid_phone_number', message='Phone number should be  8 or 13 digits long and can optionally be preceded by the country code followed by a space or a coma.', regex='/^(?:[0-8]\\d|9[0-8])\\d{3}$/')])),
                ('restaurant_name', models.CharField(blank=True, max_length=100)),
                ('checking_picture', models.FileField(blank=True, upload_to=form_and_game.models.player_directory_path)),
                ('to_contact_when_product_is_out', models.BooleanField(default=False)),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('is_validated', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='RecetteFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('support_memorisation', models.CharField(choices=[('Sur du papier volant', 'Papier Volant'), ('Sur un carnet', 'Carnet'), ('Excel ou autre tableur', 'Excel'), ('Word ou autre éditeur', 'Word'), ('Autre outil informatique', 'Informatiquement'), ('Autre', 'Autre')], max_length=90)),
                ('satisfait_support_memorisation', models.BooleanField(default=False)),
                ('temps_passe_par_mois', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('est_ce_trop', models.BooleanField()),
                ('methode_transmission_savoir', models.CharField(choices=[('Oralement', 'Oralement'), ('Sur papier volant', 'Papier Volant'), ('Dans un classeur', 'Classeur'), ('Autre', 'Autre')], max_length=90)),
                ('satisfait_mode_transmission', models.BooleanField(default=False)),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralIntroductionFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metier', models.CharField(choices=[('Chef de cuisine et pâtissier propriétaire', 'Chef de cuisine et pâtissier propriétaire'), ('Chef de cuisine et pâtissier salarié actionnaire', 'Chef de cuisine et pâtissier salarié actionnaire'), ('Chef de cuisine et pâtissier salarié', 'Chef de cuisine et pâtissier salarié')], max_length=90)),
                ('ville', models.CharField(max_length=35)),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('experience', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('nombre_couverts', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('nombre_places', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('nombre_cuisiniers', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('prix_moyen_assiette', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('nombre_etablissements', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=1)])),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
        migrations.CreateModel(
            name='FonctionnalitesPrefereesFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('premiere_fonctionnalite', models.CharField(choices=[('Semaine', 'Semaine'), ('Décade', 'Decade'), ('Quinzaine', 'Quinzaine'), ('Mensuelle', 'Mensuelle'), ('Trimestrielle', 'Trimestrielle'), ('Semestrielle', 'Semestrielle'), ('Annuelle', 'Annuelle')], max_length=90)),
                ('deuxieme_fonctionnalite', models.CharField(choices=[('Semaine', 'Semaine'), ('Décade', 'Decade'), ('Quinzaine', 'Quinzaine'), ('Mensuelle', 'Mensuelle'), ('Trimestrielle', 'Trimestrielle'), ('Semestrielle', 'Semestrielle'), ('Annuelle', 'Annuelle')], max_length=90)),
                ('troisieme_fonctionnalite', models.CharField(choices=[('Semaine', 'Semaine'), ('Décade', 'Decade'), ('Quinzaine', 'Quinzaine'), ('Mensuelle', 'Mensuelle'), ('Trimestrielle', 'Trimestrielle'), ('Semestrielle', 'Semestrielle'), ('Annuelle', 'Annuelle')], max_length=90)),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
        migrations.CreateModel(
            name='ConnaissanceAchatFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analyse_ligne_a_ligne_possible', models.BooleanField(default=False)),
                ('gain_estime_si_ligne_a_ligne', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('methode_validation_paiement', models.CharField(choices=[('Votre signature sur la facture', 'Signature'), ('Un tampon «Bon à payer»', 'Tampon'), ('Agrafage du bon de livraison avec la facture', 'Agrafage'), ('Remis en main propre à votre comptable', 'Remis'), ('Autre', 'Autre')], max_length=90)),
                ('connaissance_moyenne_chiffree_des_achats', models.CharField(choices=[('Par semaine', 'Semaine'), ('Par décade', 'Decade'), ('Par mois', 'Mois'), ('Autre', 'Autre')], max_length=90)),
                ('connaissance_moyenne_des_achats', models.BooleanField(default=False)),
                ('connaissance_repartition_par_categorie', models.BooleanField(default=True)),
                ('connaissance_quantite_par_fournisseur', models.BooleanField(default=True)),
                ('connaissance_cout', models.BooleanField(default=True)),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
        migrations.CreateModel(
            name='ComptaFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moyen_obtention_coefficients', models.CharField(max_length=90)),
                ('support_comptablitie', models.CharField(max_length=90)),
                ('outil_utilise', models.CharField(blank=True, max_length=60)),
                ('frequence_connaissance_coefficient', models.CharField(choices=[('Semaine', 'Semaine'), ('Décade', 'Decade'), ('Quinzaine', 'Quinzaine'), ('Mensuelle', 'Mensuelle'), ('Trimestrielle', 'Trimestrielle'), ('Semestrielle', 'Semestrielle'), ('Annuelle', 'Annuelle')], max_length=90)),
                ('souhait_plus_de_regularite', models.BooleanField()),
                ('depense_moyenne_obtention_bilan', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('depense_consentie_notre_version', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
        migrations.CreateModel(
            name='CommandeFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('methode_passage_commande', models.CharField(choices=[('Par téléphone en direct', 'Telephone Direct'), ('Par téléphone sur répondeur', 'Telephone Repondeur'), ('Par mail', 'Mail'), ('Commercial', 'Commercial'), ('Autre', 'Autre')], max_length=90)),
                ('frequence_passage_commande', models.CharField(choices=[('Tous les jours', 'Tous Jours'), ('Tous les deux jours', 'Tous Deux Jours'), ('Une fois par semaine', 'Toutes Semaines'), ('Autre', 'Autre')], max_length=90)),
                ('temps_passe_par_jour', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('temps_ideal_par_jour', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('support_memorisation', models.CharField(choices=[('Papier volant', 'Papier Volant'), ('Carnet', 'Carnet'), ('Informatiquement', 'Informatiquement'), ('De tête', 'De Tete'), ('Pas de mémorisation', 'None'), ('Autre', 'Autre')], max_length=90)),
                ('methode_classement_commandes', models.CharField(choices=[('Autre', 'Autre')], max_length=90)),
                ('methode_classement_bons_livraison', models.CharField(choices=[('Autre', 'Autre')], max_length=90)),
                ('methode_classement_factures', models.CharField(choices=[('Autre', 'Autre')], max_length=90)),
                ('methode_transmission_facture', models.CharField(choices=[('par mail', 'Mail'), ('par papier en direct', 'Papier'), ('en les scannant', 'Scan')], max_length=90)),
                ('proportion_factures_par_mail', models.CharField(choices=[('De 5% à 9%', 'De 5 A 9'), ('De 10% à 29%', 'De 10 A 29'), ('De 30% à 49%', 'De 30 A 49'), ('De 50% à 79%', 'De 50 A 79'), ('De 80% à 100%', 'De 80 A 100')], max_length=90)),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
        migrations.CreateModel(
            name='CarteFormAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequence_modification', models.CharField(choices=[('Toutes les semaines', 'Toutes Semaines'), ('Tous les mois', 'Tous Mois'), ('Par saison', 'Par Saison'), ('Autre', 'Autres')], max_length=90)),
                ('rythme_trouve_suffisant', models.BooleanField(default=False)),
                ('frequence_suggestion_du_jour', models.CharField(choices=[("Je n'en ai fait pas", 'Jamais'), ('Tous les jours', 'Tous Jours'), ('Tous les deux jours', 'Tous Deux Jours'), ('Toutes les semaines', 'Toutes Semaines'), ('Autre', 'Autre')], max_length=90)),
                ('methode_calcul_de_prix', models.CharField(choices=[('A la volée', 'Volee'), ('Avec les prix les plus fort', 'Prix Forts'), ('Approximativement', 'Approximativement'), ('Autre', 'Autre')], max_length=90)),
                ('prix_trouve_justes_clients', models.CharField(choices=[('Oui, suffisament juste', 'Oui'), ('Non', 'Non'), ('Pas sûr', 'Pas Sur')], max_length=90)),
                ('prix_trouve_justes_soi', models.CharField(choices=[('Oui, suffisament juste', 'Oui'), ('Non', 'Non'), ('Pas sûr', 'Pas Sur')], max_length=90)),
                ('gain_estime_si_plus_precis', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='form_and_game.player')),
            ],
        ),
    ]
